from aiogram import F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from bot.handlers.base import BaseHandler
from bot.constants import TRANSACTION_IN_PROGRESS_KEYBORD, TransactionType
from bot.db import add_transaction
from bot.states.transaction import IncomeTransactionState


class IncomeHandler(BaseHandler):
    def _register_handlers(self):
        self.router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ü—Ä–∏—Ö–æ–¥")(self.start_income)
        self.router.message(IncomeTransactionState.waiting_for_amount)(self.process_amount)

    async def start_income(self, message: Message, state: FSMContext):
        if not await self._check_editor_access(message):
            return

        await state.set_state(IncomeTransactionState.waiting_for_amount)
        await state.update_data(transaction_type=TransactionType.INCOME)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–∏—Ö–æ–¥–∞:", reply_markup=TRANSACTION_IN_PROGRESS_KEYBORD)

    async def process_amount(self, message: Message, state: FSMContext):
        try:
            amount = int(message.text.replace(",", "."))
            if amount <= 0:
                await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
                return
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
            return

        data = await state.get_data()
        total = add_transaction(amount, data["transaction_type"])

        await message.answer(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ —Å—É–º–º—É {amount} AZN —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        await message.answer(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –≤ –∫–∞–∑–Ω–µ: {total} AZN")
        await state.clear()
        await self._show_role_keyboard(message)


# Create router instance
router = IncomeHandler().router
